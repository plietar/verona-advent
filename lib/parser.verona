class EOF {
  create(): EOF & imm { Builtin.freeze(new EOF) }
}
class ParseError {
  create(): ParseError & imm { Builtin.freeze(new ParseError) }
}

class Parser
{
  _value: U64 & imm;

  create(): Parser & iso
  {
    var p = new Parser;
    p._value = IO.eof();
    p
  }

  peek(self: mut): U64 & imm {
    if self._value == IO.eof() {
      self._value = IO.read_char();
    } else { };

    self._value
  }

  consume(self: mut): U64 & imm {
    if self._value == IO.eof() {
      self._value = IO.read_char();
    } else { };

    (self._value = IO.read_char())
  }

  try_int(self: mut): (U64 & imm) | (EOF & imm) | (ParseError & imm)
  {
    self.skip_ws();
    if self.peek() == IO.eof() {
      EOF.create()
    } else {
      if Parser.is_digit(self.peek())
      {
        var result = 0;
        while Parser.is_digit(self.peek())
        {
          // 48 is ASCII for '0'
          result = (result * 10) + (self.peek() - 48);
          self.consume();
        };
        result
      }
      else
      {
        ParseError.create()
      }
    }
  }

  int(self: mut): U64 & imm {
    match self.try_int() {
      var v: U64 => v,
      var _: EOF => {
        Builtin.print("Unexpected EOF");
        Builtin.abort()
      }
      var _: ParseError => {
        Builtin.print("Parser error");
        Builtin.abort()
      }
    }
  }


  skip_ws(self: mut)
  {
    while Parser.is_whitespace(self.peek()) {
      self.consume();
    }
  }

  is_whitespace(value: U64 & imm): U64 & imm {
    (value == 10) || (value == 32)
  }

  is_digit(value: U64 & imm): U64 & imm {
    (value >= 48) && (value < 58)
  }

  is_alpha(value: U64 & imm): U64 & imm {
    ((value >= 65) && (value <= 90))
    || ((value >= 97) && (value <= 122))
  }
}
