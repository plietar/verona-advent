use "../lib/parser.verona"
use "tricode.verona"

class In {}
class Cm {}

class Utils
{
  in_range(value: U64 & imm, low: U64 & imm, high: U64 & imm): U64 & imm {
    (value >= low) && (value <= high)
  }

  read_tricode(parser: Parser & mut): (U64 & imm) | (None & imm) {
    if Parser.is_alpha(parser.peek()) {
      var c1 = parser.consume();
      if Parser.is_alpha(parser.peek()) {
        var c2 = parser.consume();
        if Parser.is_alpha(parser.peek()) {
          var c3 = parser.consume();
          (c1 * 256 * 256) + (c2 * 256) + c3
        } else { None.create() }
      } else { None.create() }
    } else { None.create() }
  }

  skip_value(parser: Parser & mut) {
    while (parser.peek() != 10) &&
          (parser.peek() != 32) &&
          (parser.peek() != IO.eof()) {
      parser.consume();
    }
  }
}

class Main
{
  part1: U64 & imm;
  part2: U64 & imm;

  read_key(parser: Parser & mut): U64 & imm {
    match Utils.read_tricode(parser) {
      var x: U64 => x,
      var _: None => Builtin.abort(),
    }
  }

  is_required(x: U64 & imm): U64 & imm {
    (x == Tricode.byr())
    || (x == Tricode.ecl())
    || (x == Tricode.eyr())
    || (x == Tricode.hcl())
    || (x == Tricode.hgt())
    || (x == Tricode.iyr())
    || (x == Tricode.pid())
  }

  read_byr(parser: Parser & mut): U64 & imm {
    Utils.in_range(parser.int(), 1920, 2002)
  }

  read_iyr(parser: Parser & mut): U64 & imm {
    Utils.in_range(parser.int(), 2010, 2020)
  }

  read_eyr(parser: Parser & mut): U64 & imm {
    Utils.in_range(parser.int(), 2020, 2030)
  }

  read_unit(parser: Parser & mut): (Cm | In | None) & imm {
    if parser.peek() == 105 { // i
      Builtin.freeze(new In)
    } else {
      if parser.peek() == 99 { // c
        Builtin.freeze(new Cm)
      } else {
        None.create()
      }
    }
  }

  read_hgt(parser: Parser & mut): U64 & imm {
    var value = parser.int();
    match Main.read_unit(parser) {
      var _: None => 0,
      var _: In => Utils.in_range(value, 59, 76),
      var _: Cm => Utils.in_range(value, 150, 193),
    }
  }

  read_hcl(parser: Parser & mut): U64 & imm {
    parser.peek() == 35
  }

  is_valid_ecl(value: U64 & imm): U64 & imm {
    (value == Tricode.amb())
    || (value == Tricode.blu())
    || (value == Tricode.brn())
    || (value == Tricode.gry())
    || (value == Tricode.grn())
    || (value == Tricode.hzl())
    || (value == Tricode.oth())
  }

  read_ecl(parser: Parser & mut): U64 & imm {
    match Utils.read_tricode(parser) {
      var _: None => { 0 }
      var value: U64 => {
        if Parser.is_whitespace(parser.peek()) {
          Main.is_valid_ecl(value)
        } else {
          0
        }
      },
    }
  }

  read_pid(parser: Parser & mut): U64 & imm {
    var n = 0;
    while Parser.is_digit(parser.peek()) {
      parser.consume();
      n = n + 1;
    };
    Parser.is_whitespace(parser.peek()) && (n == 9)
  }

  read_value(parser: Parser & mut, key: U64 & imm): U64 & imm {
    if key == Tricode.byr() { Main.read_byr(parser) }
    else {
      if key == Tricode.ecl() { Main.read_ecl(parser) }
      else {
        if key == Tricode.eyr() { Main.read_eyr(parser) }
        else {
          if key == Tricode.hcl() { Main.read_hcl(parser) }
          else {
            if key == Tricode.hgt() { Main.read_hgt(parser) }
            else {
              if key == Tricode.iyr() { Main.read_iyr(parser) }
              else {
                if key == Tricode.pid() { Main.read_pid(parser) }
                else {
                  0
                }
              }
            }
          }
        }
      }
    }
  }

  // Bit 0 of the result indicates whether the passport is Part 1 valid
  // Bit 1 of the result indicates whether the passport is Part 2 valid
  read_passport(parser: Parser & mut): U64 & imm {
    var part1 = 0;
    var part2 = 0;
    while (parser.peek() != 10) && (parser.peek() != IO.eof()) {
      var key = Main.read_key(parser);
      parser.consume(); // ':'
      var valid = Main.read_value(parser, key);
      Utils.skip_value(parser);
      parser.consume(); // newline or space

      if Main.is_required(key) {
        part1 = part1 + 1;
      } else {};

      if valid {
        part2 = part2 + 1;
      } else {}
    };
    parser.consume();

    (part1 == 7) + (part2 == 7) * 2
  }

  main() {
    var parser = mut-view (Parser.create());
    var part1 = 0;
    var part2 = 0;

    while parser.peek() != IO.eof() {
      var result = Main.read_passport(parser);
      part1 = part1 + result % 2;
      part2 = part2 + result / 2;
    };
    Builtin.print1("Part 1: {}\n", part1);
    Builtin.print1("Part 2: {}\n", part2);
  }
}
